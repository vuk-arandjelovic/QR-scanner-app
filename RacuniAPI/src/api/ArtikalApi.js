/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HTTPValidationError from '../model/HTTPValidationError';

/**
* Artikal service.
* @module api/ArtikalApi
* @version 0.1.0
*/
export default class ArtikalApi {

    /**
    * Constructs a new ArtikalApi. 
    * @alias module:api/ArtikalApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getArtikalAllArtikalAllGet operation.
     * @callback module:api/ArtikalApi~getArtikalAllArtikalAllGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Artikal All
     * @param {module:api/ArtikalApi~getArtikalAllArtikalAllGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getArtikalAllArtikalAllGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/artikal/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getArtikalByIdArtikalIdIdGet operation.
     * @callback module:api/ArtikalApi~getArtikalByIdArtikalIdIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Artikal By Id
     * @param {Number} id 
     * @param {module:api/ArtikalApi~getArtikalByIdArtikalIdIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getArtikalByIdArtikalIdIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getArtikalByIdArtikalIdIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/artikal/id/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getArtikalByNazivArtikalNazivNazivGet operation.
     * @callback module:api/ArtikalApi~getArtikalByNazivArtikalNazivNazivGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Artikal By Naziv
     * @param {String} naziv 
     * @param {module:api/ArtikalApi~getArtikalByNazivArtikalNazivNazivGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getArtikalByNazivArtikalNazivNazivGet(naziv, callback) {
      let postBody = null;
      // verify the required parameter 'naziv' is set
      if (naziv === undefined || naziv === null) {
        throw new Error("Missing the required parameter 'naziv' when calling getArtikalByNazivArtikalNazivNazivGet");
      }

      let pathParams = {
        'naziv': naziv
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/artikal/naziv/{naziv}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getArtikalByProdavnicaIdArtikalProdavnicaIdProdavnicaIdGet operation.
     * @callback module:api/ArtikalApi~getArtikalByProdavnicaIdArtikalProdavnicaIdProdavnicaIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Artikal By Prodavnica Id
     * @param {Number} prodavnicaId 
     * @param {module:api/ArtikalApi~getArtikalByProdavnicaIdArtikalProdavnicaIdProdavnicaIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getArtikalByProdavnicaIdArtikalProdavnicaIdProdavnicaIdGet(prodavnicaId, callback) {
      let postBody = null;
      // verify the required parameter 'prodavnicaId' is set
      if (prodavnicaId === undefined || prodavnicaId === null) {
        throw new Error("Missing the required parameter 'prodavnicaId' when calling getArtikalByProdavnicaIdArtikalProdavnicaIdProdavnicaIdGet");
      }

      let pathParams = {
        'prodavnica_id': prodavnicaId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/artikal/prodavnica_id/{prodavnica_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
