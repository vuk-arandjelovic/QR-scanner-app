/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HTTPValidationError from '../model/HTTPValidationError';

/**
* Racun service.
* @module api/RacunApi
* @version 0.1.0
*/
export default class RacunApi {

    /**
    * Constructs a new RacunApi. 
    * @alias module:api/RacunApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addRacunRacunPost operation.
     * @callback module:api/RacunApi~addRacunRacunPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Racun
     * @param {String} url 
     * @param {module:api/RacunApi~addRacunRacunPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    addRacunRacunPost(url, callback) {
      let postBody = null;
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling addRacunRacunPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'url': url
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/racun/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRacunAllRacunAllGet operation.
     * @callback module:api/RacunApi~getRacunAllRacunAllGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Racun All
     * @param {module:api/RacunApi~getRacunAllRacunAllGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getRacunAllRacunAllGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/racun/all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRacunAllUrlRacunAllUrlGet operation.
     * @callback module:api/RacunApi~getRacunAllUrlRacunAllUrlGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Racun All Url
     * @param {module:api/RacunApi~getRacunAllUrlRacunAllUrlGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getRacunAllUrlRacunAllUrlGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/racun/all/url', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRacunByIdRacunIdIdGet operation.
     * @callback module:api/RacunApi~getRacunByIdRacunIdIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Racun By Id
     * @param {Number} id 
     * @param {module:api/RacunApi~getRacunByIdRacunIdIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getRacunByIdRacunIdIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRacunByIdRacunIdIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/racun/id/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRacunByPibRacunProdavnicaIdPibGet operation.
     * @callback module:api/RacunApi~getRacunByPibRacunProdavnicaIdPibGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Racun By Pib
     * @param {Number} pib 
     * @param {module:api/RacunApi~getRacunByPibRacunProdavnicaIdPibGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getRacunByPibRacunProdavnicaIdPibGet(pib, callback) {
      let postBody = null;
      // verify the required parameter 'pib' is set
      if (pib === undefined || pib === null) {
        throw new Error("Missing the required parameter 'pib' when calling getRacunByPibRacunProdavnicaIdPibGet");
      }

      let pathParams = {
        'pib': pib
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/racun/prodavnica_id/{pib}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRacunByProdavnicaIdRacunProdavnicaIdProdavnicaIdGet operation.
     * @callback module:api/RacunApi~getRacunByProdavnicaIdRacunProdavnicaIdProdavnicaIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Racun By Prodavnica Id
     * @param {Number} prodavnicaId 
     * @param {module:api/RacunApi~getRacunByProdavnicaIdRacunProdavnicaIdProdavnicaIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getRacunByProdavnicaIdRacunProdavnicaIdProdavnicaIdGet(prodavnicaId, callback) {
      let postBody = null;
      // verify the required parameter 'prodavnicaId' is set
      if (prodavnicaId === undefined || prodavnicaId === null) {
        throw new Error("Missing the required parameter 'prodavnicaId' when calling getRacunByProdavnicaIdRacunProdavnicaIdProdavnicaIdGet");
      }

      let pathParams = {
        'prodavnica_id': prodavnicaId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2PasswordBearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/racun/prodavnica_id/{prodavnica_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
